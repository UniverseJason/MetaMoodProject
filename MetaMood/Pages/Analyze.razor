@page "/analyze"
@inject HttpClient httpClient;
@inject NavigationManager Navigation
@inject ILocalStorageService localStorage
@inject IJSRuntime JsRuntime
@inject IMapper mapper

<PageTitle>Analyze</PageTitle>

    @if (isReady)
    {

    <div class="analysis-container">
        <div class="analysis-input-container">
            
            @if(isAuthorized)
            {
                <p class="platform-label">Spotify</p>
                <input class="profile-input" type="text" placeholder="Enter Spotify ID... " @bind="SpotifyID" />
            }
            else
            {
                <p class="platform-label disabler">Spotify</p>
                <input class="profile-input disabler" type="text" placeholder="No authorization... " disabled />
            }
            
            <p class="platform-label">Reddit</p>
            <input class="profile-input" type="text" placeholder="Enter Reddit ID... " @bind="RedditID" />

            <p class="platform-label">Twitter</p>
            <input class="profile-input" type="text" placeholder="Enter Twitter ID... " @bind="TwitterID" />

           @*<button type="submit" class="submit-btn" @onclick="GetSpotifyAccessTokenAsync">Get Spotify Authorization</button>*@
            <button type="submit" class="submit-btn" @onclick="GetAllAnalysisAsync">Submit</button>
        </div>
        <div class="analysis-output-container">
        </div>
    </div>
    <p>@ErrorMsg</p>
    <p>@Test</p>
}
else
{
    <h1 class="authorization-message-header">Authorization is required to access your Spotify data.</h1>
    <p class="authorization-message-paragraph">If you want emotional analysis performed on your Spotify data, please click on the button to give MetaMood authorization to retrieve your saved tracks from Spotify.</p>
    <button type="submit" class="submit-btn" @onclick="GetSpotifyAccessTokenAsync">Get Spotify Authorization</button>
    <button type="submit" class="submit-btn skip-btn" @onclick="AnalyzeWithoutAuthorization">Skip</button>
}

@code {

    public string? SpotifyID;

    public string? RedditID;

    public string? TwitterID;

    public string? Test;

    public string? ErrorMsg;

    public bool isAuthorized = false;

    public bool isReady = false;

    private readonly string _ClientID = "b4f82aba44b74f7caee510bd165499fa";


    protected override async Task OnInitializedAsync()
    {
        var fragment = Navigation.ToAbsoluteUri(Navigation.Uri).Fragment;

        if (fragment.Contains("access_token"))
        {
            isAuthorized = true;
            isReady = true;
            var accessToken = fragment.Split('&').FirstOrDefault(x => x.Contains("access_token"))?.Split('=')[1];
            await localStorage.SetItemAsStringAsync("access_token", accessToken);
            Navigation.NavigateTo("/analyze");
        }
    }

    public async Task GetAllAnalysisAsync()
    {
        await GetSpotifyDataAsync();

    }

    public void AnalyzeWithoutAuthorization()
    {
        isReady = true;
    }

    public async Task GetSpotifyAccessTokenAsync()
    {

        IDictionary<string, string> requestAccessTokenParameters = new Dictionary<string, string>();
        requestAccessTokenParameters.Add("redirect_uri", "https://ec2-3-238-222-13.compute-1.amazonaws.com/analyze");
        requestAccessTokenParameters.Add("client_id", _ClientID);
        requestAccessTokenParameters.Add("response_type", "token");
        requestAccessTokenParameters.Add("scope", "user-library-read");

        var dictFormUrlEncodedContent = new FormUrlEncodedContent(requestAccessTokenParameters);
        var queryString = await dictFormUrlEncodedContent.ReadAsStringAsync();
        var query = $"https://accounts.spotify.com/authorize?{queryString}";

        Navigation.NavigateTo(query);

    }


    private async Task GetSpotifyDataAsync()
    {
        HttpRequestMessage request = new(HttpMethod.Get, $"https://api.spotify.com/v1/me/tracks");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await localStorage.GetItemAsStringAsync("access_token"));

        HttpResponseMessage response = await httpClient.SendAsync(request);

        string rawTrackStrings = "";
        string userTracks = "";
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();

            string pattern = @"\/track\/[a-zA-Z0-9]+";

            MatchCollection matches = Regex.Matches(content, pattern);

            foreach (Match match in matches)
            {
                rawTrackStrings += match + ",";
            }
            userTracks = rawTrackStrings.Replace("/track/", "");
            Test = userTracks;

        }
        else
        {
            ErrorMsg = "ERROR: Something went wrong when retrieving user saved tracks.";
        }

        // remove the last comma
        int lastIndex = userTracks.LastIndexOf(',');
        if (lastIndex != -1)
        {
            userTracks = userTracks.Remove(lastIndex, 1);
        }

        request = new(HttpMethod.Get, $"https://api.spotify.com/v1/audio-features/?ids={userTracks}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await localStorage.GetItemAsStringAsync("access_token"));
        response = await httpClient.SendAsync(request);

        IList<SpotifyTrackDTO>? tracks = new List<SpotifyTrackDTO>();
        if(response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            tracks = JObject.Parse(content)?.SelectToken("audio_features")?.ToObject<List<SpotifyTrackDTO>>();
            
            if(tracks is not null)
                foreach(var t in tracks)
                {
                    Test += t.Acousticness + ", " + t.Liveness + "\n";
                }
            
        }
        else
        {
            string headers = "";
            foreach(var h in response.Headers)
            {
                headers += h.Key + ":" + h.Value + "   /////   ";
            }

            ErrorMsg = response.StatusCode.ToString() + " ... Headers: " + headers + " ... Content: " + await response.Content.ReadAsStringAsync();
        }

    }
}
