@page "/analyze"
@inject HttpClient httpClient;
@inject NavigationManager Navigation
@inject ILocalStorageService localStorage
@inject IJSRuntime JsRuntime

<PageTitle>Analyze</PageTitle>



<div class="analysis-container">
    <div class="analysis-input-container">
        <p class="platform-label">Spotify</p>
        <input class="profile-input" type="text" placeholder="Enter Spotify ID... " @bind="SpotifyID" />
        <p class="platform-label">Reddit</p>
        <input class="profile-input" type="text" placeholder="Enter Reddit ID... " @bind="RedditID" />

        <p class="platform-label">Twitter</p>
        <input class="profile-input" type="text" placeholder="Enter Twitter ID... " @bind="TwitterID" />

        <button type="submit" class="submit-btn" @onclick="GetSpotifyAccessTokenAsync">Get Spotify Authorization</button>
        <button type="submit" class="submit-btn" @onclick="GetAllAnalysisAsync">Submit</button>
    </div>
    <div class="analysis-output-container">
    </div>
</div>

<p>@Test</p>

@code {

    public string? SpotifyID;

    public string? RedditID;

    public string? TwitterID;

    public string? Test;


    protected override async Task OnInitializedAsync()
    {
        var fragment = Navigation.ToAbsoluteUri(Navigation.Uri).Fragment;

        if (fragment.Contains("access_token"))
        {
            var accessToken = fragment.Split('&').FirstOrDefault(x => x.Contains("access_token"))?.Split('=')[1];
            await localStorage.SetItemAsStringAsync("access_token", accessToken);
            Navigation.NavigateTo("/analyze");
        }
    }

    public async Task TEST()
    {
        Test = await localStorage.GetItemAsStringAsync("access_token");
    }


    public async Task GetAllAnalysisAsync()
    {
        //await GetSpotifyAccessTokenAsync();
        await GetSpotifyDataAsync();

    }


    public async Task GetSpotifyAccessTokenAsync()
    {

        IDictionary<string, string> requestAccessTokenParameters = new Dictionary<string, string>();
        requestAccessTokenParameters.Add("redirect_uri", "https://ec2-3-238-222-13.compute-1.amazonaws.com/analyze");
        requestAccessTokenParameters.Add("client_id", "b4f82aba44b74f7caee510bd165499fa");
        requestAccessTokenParameters.Add("response_type", "token");

        var dictFormUrlEncodedContent = new FormUrlEncodedContent(requestAccessTokenParameters);
        var queryString = await dictFormUrlEncodedContent.ReadAsStringAsync();
        var query = $"https://accounts.spotify.com/authorize?{queryString}";

        Navigation.NavigateTo(query);

    }


    private async Task GetSpotifyDataAsync()
    {
        HttpRequestMessage request = new(HttpMethod.Get, $"https://api.spotify.com/v1/users/{SpotifyID}/playlists");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await localStorage.GetItemAsStringAsync("access_token"));

        HttpResponseMessage response = await httpClient.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            Test = content;
        }
        else
        {
            Test = "ERROR";
        }
    }
}
