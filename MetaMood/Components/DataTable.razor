@using System.ComponentModel;
@inject HttpClient httpClient;

@if(tracks is null)
{
    <svg class="loading-progress">
        <circle r="40%" cx="50%" cy="50%" />
        <circle r="40%" cx="50%" cy="50%" />
    </svg>

}
else
{
    <div class="entire-data-table-container">
        <div class="data-table-header">
            <span class="data-table-title">@Title</span>
        </div>
        <div class="data-table-container">
            <table class="data-table">
                <thead>
                    <tr class="top-row">
                        @if(DataSetType is not null)
                        {
                            foreach (PropertyDescriptor descriptor in TypeDescriptor.GetProperties(DataSetType))
                            {
                                <td><button class="table-head-button">@descriptor.DisplayName</button></td>
                            }
                        }
                    </tr>
                </thead>
                <tbody>
                    @if (DataSetType is not null)
                    {
                        @foreach (var track in tracks)
                        {
                            <tr class="table-row">
                                @foreach (PropertyDescriptor descriptor in TypeDescriptor.GetProperties(DataSetType))
                                {

                                    if (descriptor.PropertyType == typeof(int?) || descriptor.PropertyType == typeof(double?))
                                    {
                                        <td class="table-cell num-cell">@descriptor.GetValue(track)</td>
                                    }
                                    else
                                    {
                                        <td class="table-cell">@descriptor.GetValue(track)</td>
                                    }
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="pagination-container">
            <nav class="pagination-nav" aria-label="Table Pagination">
                <ul class="pagination pagination-ul">
                    
                    <li class="page-item">
                        <button class="page-link" aria-label="Previous" @onclick="PrevPages">
                            <span aria-hidden="true">&laquo;</span>
                        </button>
                    </li>

                    @for(int i = LowerPageIndex; i <= UpperPageIndex; i++)
                    {
                        {
                            int x = i;
                            <li class="page-item numeric-page-item"><button class="page-link page-link-text" @onclick="() => GetPageAsync(x)">@i</button></li>
                        }
                    }

                    <li class="page-item">
                        <button class="page-link" aria-label="Next" @onclick="NextPages">
                            <span aria-hidden="true">&raquo;</span>
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    </div>

}


@code {

    [Parameter]
    public Type? DataSetType { get; set; }

    [Parameter]
    public string Title { get; set; }

    public const int PageSize = 10;

    public int PageCount { get; set; } = 1;

    public int LowerPageIndex { get; set; } = 1;

    public int UpperPageIndex { get; set; } = 5;

    public int NumShownPages = 10;

    public string? TableName { get; set; }

    public SpotifyParameters SpotifyParameters = new SpotifyParameters();

    public IList<SpotifyTrackDTO>? tracks;

    public string PageNumber { get; set; } = "-1";

    protected override async Task OnInitializedAsync()
    {
        // Set the page size
        SpotifyParameters.PageSize = PageSize;

        // Retrieve the type of the data that will be displayed in the table
        TableName = ParseComponentParameters.ParseTableFromType(DataSetType);

        // Make a request to the API to get the number of records for the given query
        var requestPageCount = new HttpRequestMessage(HttpMethod.Get, $"/count/{TableName}");
        HttpResponseMessage responsePageCount = await httpClient.SendAsync(requestPageCount);

        // Check if the response has a success status code
        if(responsePageCount.IsSuccessStatusCode)
        {

            // Extract the body of the successful response as a string asynchronously
            string responsePageCountBody = await responsePageCount.Content.ReadAsStringAsync();

            try
            {
                // Try to convert the count to an integer
                int numRecords = Convert.ToInt32(responsePageCountBody);

                // Set PageCount equal to how many pages it would take to display numRecords
                PageCount = numRecords / PageSize;

                // If there are remaining records that would not fill up an entire page, add another page
                if(numRecords % PageSize != 0)
                {
                    PageCount++;
                }
            }
            catch{} // If an exception is thrown, PageCount will remain 1, which is how such an exception is intended to be handled
        }

        // If NumShownPages is greater than PageCount, paging won't work, so reduce NumShownPages if there are few results
        // Also, adjust UpperPageIndex accordingly
        UpperPageIndex = (NumShownPages <= PageCount) ? NumShownPages : PageCount;
        NumShownPages = (NumShownPages <= PageCount) ? NumShownPages : PageCount;

        // Make an initial request to the database to retrieve a single page of data with no search or sort criteria
        var requestTable = new HttpRequestMessage(HttpMethod.Get, $"/{TableName}?pageSize=10&pageNumber=1");
        HttpResponseMessage responseTable = await httpClient.SendAsync(requestTable);

        // If the response was successful, asynchronously read and deserialize the JSON into a list that will be displayed
        if(responseTable.IsSuccessStatusCode)
        {
            tracks = await responseTable.Content.ReadFromJsonAsync<IList<SpotifyTrackDTO>>();
        }
    }

    /// <summary>
    /// This function changes the indices for paging to the previous NumShownPages.
    /// This function endures that if the UpperPageIndex is at the top and the top is not a multiple
    /// of NumShownPages that it subtracts enough to get it to the nearest multiple of NumShownPages,
    /// keeping the consistency of the paging.
    /// This function also ensures that the LowerPageIndex does not go below 1.
    /// </summary>
    public void PrevPages()
    {

        if (UpperPageIndex == PageCount && PageCount % NumShownPages != 0)
        {
            LowerPageIndex -= NumShownPages;
            UpperPageIndex -= (PageCount % NumShownPages);
        }
        else if(LowerPageIndex - NumShownPages < 1)
        {
            LowerPageIndex = 1;
            UpperPageIndex = NumShownPages;
        }
        else
        {
            LowerPageIndex -= NumShownPages;
            UpperPageIndex -= NumShownPages;
        }
    }

    /// <summary>
    /// This function changes the indices for paging to the next NumShownPages.
    /// This function endures that the UpperPageIndex does not exceed PageCount; if adding NumShownPages
    /// to UpperPageIndex would make it exceed PageCount, then UpperPageIndex is simply set to PageCount.
    /// </summary>
    public void NextPages()
    {
        if(UpperPageIndex == PageCount)
        {
            return;
        }

        if (UpperPageIndex + NumShownPages <= PageCount)
        {
            LowerPageIndex += NumShownPages;
            UpperPageIndex += NumShownPages;
        }
        else
        {
            LowerPageIndex += NumShownPages;
            UpperPageIndex = PageCount;
        }
    }

    public async Task GetPageAsync(int pgNum)
    {

        SpotifyParameters.PageNumber = pgNum;

        var queryParameters = new Dictionary<string, string>
        {
            { "PageSize", SpotifyParameters.PageSize.ToString() },
            { "PageNumber", SpotifyParameters.PageNumber.ToString() }

        };
        var dictFormUrlEncoded = new FormUrlEncodedContent(queryParameters);
        var queryString = await dictFormUrlEncoded.ReadAsStringAsync();

        var requestTable = new HttpRequestMessage(HttpMethod.Get, $"/{TableName}?{queryString}");
        HttpResponseMessage responseTable = await httpClient.SendAsync(requestTable);

        // If the response was successful, asynchronously read and deserialize the JSON into a list that will be displayed
        if (responseTable.IsSuccessStatusCode)
        {
            tracks = await responseTable.Content.ReadFromJsonAsync<IList<SpotifyTrackDTO>>();
        }
        
    }

}
