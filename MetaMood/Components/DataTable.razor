@using System.ComponentModel;
@inject HttpClient httpClient;
@inject IJSRuntime JsRuntime;

@typeparam T
@typeparam P where P:QueryParameters, new()

@if(records is null)
{
    <div class="spinner"></div>
}
else
{
    <div class="entire-data-table-container">
        <div class="data-table-header">
            <span class="data-table-title">@Title</span>
        </div>
        <div class="data-table-container">
            <table class="data-table">
                <thead>
                    <tr class="top-row">
                        @if(DataSetType is not null)
                        {
                            foreach (PropertyDescriptor descriptor in TypeDescriptor.GetProperties(DataSetType))
                            {
                                <td><button class="table-head-button" id="@descriptor.DisplayName" @onclick='() => HandleSortAsync(descriptor.DisplayName)'>@descriptor.DisplayName</button></td>
                            }
                        }
                    </tr>
                </thead>
                <tbody>
                    @if (DataSetType is not null)
                    {
                        @foreach (var rec in records)
                        {
                            <tr class="table-row">
                                @foreach (PropertyDescriptor descriptor in TypeDescriptor.GetProperties(DataSetType))
                                {

                                    if (descriptor.PropertyType == typeof(int?) || descriptor.PropertyType == typeof(double?))
                                    {
                                        <td class="table-cell num-cell">@descriptor.GetValue(rec)</td>
                                    }
                                    else
                                    {
                                        <td class="table-cell">@descriptor.GetValue(rec)</td>
                                    }
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="pagination-container">
            <nav class="pagination-nav" aria-label="Table Pagination">
                <ul class="pagination pagination-ul">
                    
                    <li class="page-item">
                        <button class="page-link" aria-label="Previous" @onclick="PrevPages">
                            <span aria-hidden="true">&laquo;</span>
                        </button>
                    </li>

                    @for(int i = LowerPageIndex; i <= UpperPageIndex; i++)
                    {
                        {
                            int x = i;
                            <li class="page-item numeric-page-item"><button class="page-link page-link-text" @onclick="() => GetPageAsync(x)">@i</button></li>
                        }
                    }

                    <li class="page-item">
                        <button class="page-link" aria-label="Next" @onclick="NextPages">
                            <span aria-hidden="true">&raquo;</span>
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    </div>

    <p id="test">@Test</p>
}


@code {

    [Parameter]
    public Type? DataSetType { get; set; }

    [Parameter]
    public string? Title { get; set; }

    public const int PageSize = 10;

    public int PageCount { get; set; } = 1;

    public int LowerPageIndex { get; set; } = 1;

    public int UpperPageIndex { get; set; } = 5;

    public int NumShownPages = 5;

    public string? TableName { get; set; }

    public P QParameters = (P) new P();

    public IList<T>? records;

    public string? Test;

    protected override async Task OnInitializedAsync()
    {
        // Set the page size
        QParameters.GetType().GetProperty("PageSize")?.SetValue(QParameters, PageSize);
        // QParameters.PageSize = PageSize;

        // Set the initial page to 1
        QParameters.GetType().GetProperty("PageNumber")?.SetValue(QParameters, 1);
        //QParameters.PageNumber = 1;

        // Retrieve the type of the data that will be displayed in the table
        TableName = ParseComponentParameters.ParseTableFromType(DataSetType);

        // Make a request to the API to get the number of records for the given query
        var requestPageCount = new HttpRequestMessage(HttpMethod.Get, $"/count/{TableName}");
        HttpResponseMessage responsePageCount = await httpClient.SendAsync(requestPageCount);

        // Check if the response has a success status code
        if(responsePageCount.IsSuccessStatusCode)
        {

            // Extract the body of the successful response as a string asynchronously
            string responsePageCountBody = await responsePageCount.Content.ReadAsStringAsync();

            try
            {
                // Try to convert the count to an integer
                int numRecords = Convert.ToInt32(responsePageCountBody);

                // Set PageCount equal to how many pages it would take to display numRecords
                PageCount = numRecords / PageSize;

                // If there are remaining records that would not fill up an entire page, add another page
                if(numRecords % PageSize != 0)
                {
                    PageCount++;
                }
            }
            catch{} // If an exception is thrown, PageCount will remain 1, which is how such an exception is intended to be handled
        }

        // If NumShownPages is greater than PageCount, paging won't work, so reduce NumShownPages if there are few results
        // Also, adjust UpperPageIndex accordingly
        UpperPageIndex = (NumShownPages <= PageCount) ? NumShownPages : PageCount;
        NumShownPages = (NumShownPages <= PageCount) ? NumShownPages : PageCount;

        await GetDataAsync();
    }

    /// <summary>
    /// This function changes the indices for paging to the previous NumShownPages.
    /// This function endures that if the UpperPageIndex is at the top and the top is not a multiple
    /// of NumShownPages that it subtracts enough to get it to the nearest multiple of NumShownPages,
    /// keeping the consistency of the paging.
    /// This function also ensures that the LowerPageIndex does not go below 1.
    /// </summary>
    public void PrevPages()
    {

        if (UpperPageIndex == PageCount && PageCount % NumShownPages != 0)
        {
            LowerPageIndex -= NumShownPages;
            UpperPageIndex -= (PageCount % NumShownPages);
        }
        else if(LowerPageIndex - NumShownPages < 1)
        {
            LowerPageIndex = 1;
            UpperPageIndex = NumShownPages;
        }
        else
        {
            LowerPageIndex -= NumShownPages;
            UpperPageIndex -= NumShownPages;
        }
    }

    /// <summary>
    /// This function changes the indices for paging to the next NumShownPages.
    /// This function endures that the UpperPageIndex does not exceed PageCount; if adding NumShownPages
    /// to UpperPageIndex would make it exceed PageCount, then UpperPageIndex is simply set to PageCount.
    /// </summary>
    public void NextPages()
    {
        if(UpperPageIndex == PageCount)
        {
            return;
        }

        if (UpperPageIndex + NumShownPages <= PageCount)
        {
            LowerPageIndex += NumShownPages;
            UpperPageIndex += NumShownPages;
        }
        else
        {
            LowerPageIndex += NumShownPages;
            UpperPageIndex = PageCount;
        }
    }

    /// <summary>
    /// Set the page based on the option the user selected and make another call to the database
    /// </summary>
    /// <param name="pgNum">The page number that is to be retrieved</param>
    /// <returns>Nothing</returns>
    public async Task GetPageAsync(int pgNum)
    {
        QParameters.GetType().GetProperty("PageNumber")?.SetValue(QParameters, pgNum);
        await GetDataAsync();
    }

    /// <summary>
    /// This function sets the sort criteria and make another call to the database.
    /// </summary>
    /// <param name="id">The name of the attribute by which the sort is to be done.</param>
    /// <returns>Nothing</returns>
    public async Task HandleSortAsync(string id)
    {
        int wasActive = await JsRuntime.InvokeAsync<int>("SortingButtons", id);
        string SortByCriteria = (wasActive == 1) ? "Name" : id;
        QParameters.GetType().GetProperty("SortBy")?.SetValue(QParameters, SortByCriteria);
        QParameters.GetType().GetProperty("PageNumber")?.SetValue(QParameters, 1);
        await GetDataAsync();
    }

    /// <summary>
    /// This function makes a call to the database with all of the parameters that are set. 
    /// </summary>
    /// <returns>Nothing</returns>
    public async Task GetDataAsync()
    {

        var queryParameters = new Dictionary<string, string>();

        // use reflection to go through the parameters provided and add them as query parameters that will be encoded into the URL
        if(typeof(P) is not null)
        {
            foreach (PropertyDescriptor descriptor in TypeDescriptor.GetProperties(typeof(P)))
            {
                if(descriptor.GetValue(QParameters) != null)
                {
                    queryParameters.Add(descriptor.Name, descriptor.GetValue(QParameters)?.ToString() ?? string.Empty);
                }
            }
        }

        var dictFormUrlEncoded = new FormUrlEncodedContent(queryParameters);
        var queryString = await dictFormUrlEncoded.ReadAsStringAsync();

        var requestTable = new HttpRequestMessage(HttpMethod.Get, $"/{TableName}?{queryString}");
        HttpResponseMessage responseTable = await httpClient.SendAsync(requestTable);

        // If the response was successful, asynchronously read and deserialize the JSON into a list that will be displayed
        if (responseTable.IsSuccessStatusCode)
        {
            records = await responseTable.Content.ReadFromJsonAsync<IList<T>>();
        }

    }

}
